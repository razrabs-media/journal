input AddPostToFrontPageInput {
  componentUid: String!
  position: PositionInput!
  postUid: String!
}

input AssignUserGroupInput {
  userGroupsName: [String!]!
  userUid: String!
}

input CancelCommentDto {
  token: String!
}

type Category {
  createdAt: Date!
  name: String!
  posts: [Post!]
  uid: UID!
  updatedAt: Date!
}

type CategoryItem {
  createdAt: Date!
  name: String!
  uid: UID!
  updatedAt: Date!
}

input ChangePasswordInput {
  newPassword: String!
  password: String!
}

type CommentItem {
  author: ProfileItem!
  authorUid: UID!
  content: String!
  createdAt: Date!
  post: SimplePost!
  postUid: UID!
  replyingToComment: CommentItem
  replyingToCommentUid: UID
  uid: UID!
  updatedAt: Date!
}

type CommentPagination {
  count: Int!
  items: [CommentItem!]!
  page: Int!
  pages: Int!
}

type Component {
  configuration: Configuration!
  createdAt: Date!
  name: String!
  uid: UID!
  updatedAt: Date!
}

type ComponentItem {
  configuration: Configuration!
  createdAt: Date!
  name: String!
  uid: UID!
  updatedAt: Date!
}

type Configuration {
  h: Int!
  type: String!
  w: Int!
}

input ConfigurationInput {
  h: Int!
  type: String!
  w: Int!
}

"""Upload scalar"""
scalar Content

input CreateCategoriesInput {
  name: String!
}

type CreateCommentDto {
  token: String!
}

input CreateCommentInput {
  content: String!
  postUid: String!
  replyingToCommentUid: String
}

input CreateComponentInput {
  configuration: ConfigurationInput!
  name: String!
}

input CreateDataSourceInput {
  name: DataSourceName!
  source: String!
  type: DataSourceType!
}

input CreateDraftInput {
  description: String
  title: String
}

input CreateFeedInput {
  name: String!
  status: FeedStatus
  tagUids: [String!]!
}

input CreateFrontPageInput {
  title: String!
}

input CreatePermissionInput {
  name: PermissionName!
}

input CreatePostInput {
  contentLink: String!
}

input CreatePrioritiesInput {
  grade: Int!
  name: String!
}

input CreateUserInput {
  email: String!
  fullName: String!
  login: String!
}

type DataSource {
  createdAt: Date!
  feeds: [Feed!]
  name: DataSourceName!
  posts: [Post!]
  source: String!
  type: DataSourceType!
  uid: UID!
  updatedAt: Date!
}

type DataSourceItem {
  createdAt: Date!
  name: DataSourceName!
  source: String!
  type: DataSourceType!
  uid: UID!
  updatedAt: Date!
}

enum DataSourceName {
  Md
}

enum DataSourceType {
  External
  Internal
}

"""Date scalar type"""
scalar Date

input DownloadLabelsDto {
  projectName: String!
  repoName: String!
}

input DownloadPostsDto {
  branchName: String!
  githubAuthorUid: String!
  projectName: String!
  repoName: String!
}

type DraftItem {
  content: Content
  createdAt: Date!
  description: String!
  title: String!
  uid: UID!
  updatedAt: Date!
}

type DraftPagination {
  count: Int!
  items: [DraftItem!]!
  page: Int!
  pages: Int!
}

type Feed {
  createdAt: Date!
  dataSources: [DataSource!]
  name: String!
  status: FeedStatus
  tags: [TagItem!]
  uid: UID!
  updatedAt: Date!
}

type FeedItem {
  createdAt: Date!
  name: String!
  status: FeedStatus
  tags: [TagItem!]
  uid: UID!
  updatedAt: Date!
}

enum FeedStatus {
  Hidden
  Private
  Public
}

input FilterCommentArgs {
  contains: String
  postUid: String
}

input FilterFeedsArgs {
  feedStatuses: [FeedStatus!]
}

type FrontPage {
  content: [PostOnFrontPage!]!
  createdAt: Date!
  endDate: Date
  publicationDate: Date
  title: String!
  uid: UID!
  updatedAt: Date!
}

type FrontPageItem {
  createdAt: Date!
  endDate: Date
  publicationDate: Date
  title: String!
  uid: UID!
  updatedAt: Date!
}

type FrontPagePagination {
  count: Int!
  items: [FrontPageItem!]!
  page: Int!
  pages: Int!
}

enum FrontPageType {
  Archive
  Draft
}

type GithubAuthor {
  avatarUrl: String
  createdAt: Date!
  name: String
  posts: [Post!]
  uid: UID!
  updatedAt: Date!
  user: User
  usernameUrl: String!
}

type Mutation {
  assignGroupToUser(data: AssignUserGroupInput!): UserItem!
  cancelComment(data: CancelCommentDto!): ResponseStatus!
  changePassword(data: ChangePasswordInput!): UserItem!
  changePermissions(data: UserGroupInput!): UserGroupItem!
  changePostsOnFrontPage(data: [AddPostToFrontPageInput!]!, frontPageUid: UID!): [PostOnFrontPageItem!]!
  createCategory(data: CreateCategoriesInput!): Category!
  createComment(data: CreateCommentInput!): CreateCommentDto!
  createComponent(data: CreateComponentInput!): Component!
  createDataSource(data: CreateDataSourceInput!): DataSource!
  createDraft(content: Upload, data: CreateDraftInput): DraftItem!
  createFeed(data: CreateFeedInput!): FeedItem!
  createFrontPage(data: CreateFrontPageInput!): FrontPage!
  createPermission(data: CreatePermissionInput!): PermissionItem!
  createPost(data: CreatePostInput!): Post!
  createPriority(data: CreatePrioritiesInput!): Priority!
  createUser(data: CreateUserInput!): UserWithPassword!
  createUserGroup(data: UserGroupInput!): UserGroupItem!
  downloadLabels(data: DownloadLabelsDto!): [TagItem!]!
  downloadPosts(data: DownloadPostsDto!): [ResponseStatus!]!
  publishFrontPage(uid: UID!): FrontPage!
  refreshToken: TokensDto!
  registration(data: CreateUserInput!, password: String!): UserToken!
  removeCategory(uid: UID!): Int!
  removeComment(uid: UID!): Int!
  removeComponent(uid: UID!): Int!
  removeDataSource(uid: UID!): Int!
  removeDraft(uid: UID!): Int!
  removeFeed(uid: UID!): Int!
  removeFrontPage(uid: UID!): Int!
  removeGithubAuthor(uid: UID!): Int!
  removePermission(uid: UID!): Int!
  removePost(uid: UID!): Int!
  removePriority(uid: UID!): Int!
  removeProfile(uid: UID!): Int!
  removeUser(uid: UID!): Int!
  removeUserGroup(uid: UID!): Int!
  resetPasswordForUser(data: ResetPasswordInput!): UserItem!
  setGithubPrivateToken(data: SetGithubPrivateTokenDto!): ResponseStatus!
  share(uid: UID!): PostInteractions!
  shareFrontPage(uid: UID!): FrontPage!
  signIn(data: SignInInput!): UserToken!
  signOut: ResponseStatus!
  unAssignGroupToUser(data: AssignUserGroupInput!): UserGroupItem!
  updateCategory(data: UpdateCategoriesInput!, uid: UID!): Int!
  updateComment(data: UpdateCommentDto!, uid: UID!): CommentItem!
  updateComponent(data: UpdateComponentInput!, uid: UID!): Component!
  updateDataSource(data: UpdateDataSourceInput!, uid: UID!): DataSource!
  updateDraft(content: Upload, data: UpdateDraftInput!, uid: UID!): DraftItem!
  updateFeed(data: UpdateFeedInput!, uid: UID!): FeedItem!
  updateFrontPage(data: UpdateFrontPageInput!, uid: UID!): FrontPage!
  updatePost(uid: UID!, updatePostDto: UpdatePostInput!): Post!
  updatePriority(data: UpdatePrioritiesInput!, uid: UID!): Priority!
  updateProfile(avatar: Upload, data: ProfileUpdateInput!, uid: UID!): ProfileItem!
  updateUser(data: UserInput!, uid: UID!): User!
  view(uid: UID!): PostInteractions!
}

type PermissionItem {
  createdAt: Date!
  name: PermissionName!
  uid: UID!
  updatedAt: Date!
}

enum PermissionName {
  CreateComment
  CreateFeed
  SuperAdministrator
}

type Position {
  x: Int!
  y: Int!
}

input PositionInput {
  x: Int!
  y: Int!
}

type Post {
  content: String!
  createdAt: Date!
  description: String!
  frontPages: [FrontPageItem!]!
  githubAuthor: GithubAuthor
  interactions: PostInteractions!
  previewUrl: String
  readingTime: Int
  tags: [TagItem!]
  title: String!
  uid: UID!
  updatedAt: Date!
}

type PostInteractions {
  createdAt: Date!
  sharesCount: Int!
  uid: UID!
  updatedAt: Date!
  viewsCount: Int!
}

type PostOnFrontPage {
  component: ComponentItem!
  componentUid: String!
  createdAt: Date!
  frontPageUid: String!
  position: Position!
  post: SimplePost!
  postUid: String!
  uid: UID!
  updatedAt: Date!
}

type PostOnFrontPageItem {
  componentUid: String!
  createdAt: Date!
  frontPageUid: String!
  position: Position!
  postUid: String!
  uid: UID!
  updatedAt: Date!
}

type PostPagination {
  count: Int!
  items: [Post!]!
  page: Int!
  pages: Int!
}

type Priority {
  createdAt: Date!
  grade: Int!
  name: String!
  posts: [Post!]
  uid: UID!
  updatedAt: Date!
}

type PriorityItem {
  createdAt: Date!
  grade: Int!
  name: String!
  uid: UID!
  updatedAt: Date!
}

type Profile {
  avatarUrl: String
  createdAt: Date!
  email: String
  fullName: String
  publicName: String
  uid: UID!
  updatedAt: Date!
  user: User!
}

type ProfileItem {
  avatarUrl: String
  createdAt: Date!
  email: String
  fullName: String
  publicName: String
  uid: UID!
  updatedAt: Date!
}

input ProfileUpdateInput {
  publicName: String
}

type Query {
  categories: [CategoryItem!]!
  category(uid: UID!): Category!
  comments(filter: FilterCommentArgs, page: Int = 1, perPage: Int = 20): CommentPagination!
  component(uid: UID!): Component!
  components: [ComponentItem!]!
  currentFrontPage: FrontPage!
  currentUser: User!
  dataSource(uid: UID!): DataSource!
  dataSources: [DataSourceItem!]!
  draft(uid: UID!): DraftItem!
  drafts(page: Int = 1, perPage: Int = 20): DraftPagination!
  feed(uid: UID!): FeedItem!
  feeds(filter: FilterFeedsArgs, sort: SortFeedsArgs): [FeedItem!]!
  frontPage(uid: UID!): FrontPage!
  frontPages(frontPageType: [FrontPageType!], page: Int = 1, perPage: Int = 20, sort: SortFrontPageArgs): FrontPagePagination!
  getTokenPayload: TokenPayloadDto!
  githubAuthor(uid: UID!): GithubAuthor!
  githubAuthors: [GithubAuthor!]!
  permissions: [PermissionItem!]!
  post(uid: UID!): Post!
  posts(page: Int = 1, perPage: Int = 20): PostPagination!
  postsByFeed(page: Int = 1, perPage: Int = 20, uid: UID!): PostPagination!
  priorities: [PriorityItem!]!
  priority(uid: UID!): Priority!
  profile(uid: UID!): Profile!
  profiles: [ProfileItem!]!
  sharedFrontPage(uid: UID!): FrontPage
  tags: [TagItem!]!
  user(uid: UID!): User!
  userGroups: [UserGroupItem!]!
  users: [UserItem!]!
}

input ResetPasswordInput {
  login: String!
}

type ResponseStatus {
  status: Float!
}

input SetGithubPrivateTokenDto {
  githubLogin: String!
  token: String!
}

input SignInInput {
  login: String!
  password: String!
}

type SimplePost {
  content: String!
  createdAt: Date!
  description: String!
  previewUrl: String
  readingTime: Int
  title: String!
  uid: UID!
  updatedAt: Date!
}

input SortFeedsArgs {
  byCreationDate: SortType
  byName: SortType
  byUpdateDate: SortType
}

input SortFrontPageArgs {
  byCreationDate: SortType
  byEndDate: SortType
  byPublicationDate: SortType
  byUpdateDate: SortType
}

enum SortType {
  asc
  desc
}

type TagItem {
  createdAt: Date!
  description: String!
  name: String!
  uid: UID!
  updatedAt: Date!
}

type TokenPayloadDto {
  email: String!
  login: String!
  permissions: [String!]!
}

type TokensDto {
  accessToken: String!
  refreshToken: String!
}

"""Uid custom scalar type"""
scalar UID

input UpdateCategoriesInput {
  name: String!
}

input UpdateCommentDto {
  content: String!
}

input UpdateComponentInput {
  configuration: ConfigurationInput!
  name: String!
}

input UpdateDataSourceInput {
  name: DataSourceName!
  source: String!
  type: DataSourceType!
}

input UpdateDraftInput {
  description: String
  title: String
}

input UpdateFeedInput {
  name: String!
  tagUids: [UID!]!
}

input UpdateFrontPageInput {
  title: String!
}

input UpdatePostInput {
  content: String
  description: String
  previewUrl: String
  tagUids: [UID!]
  title: String
}

input UpdatePrioritiesInput {
  grade: Int!
  name: String!
}

"""Upload scalar"""
scalar Upload

type User {
  createdAt: Date!
  isTransportPassword: Boolean!
  login: String!
  profile: ProfileItem
  profileUid: UID!
  uid: UID!
  updatedAt: Date!
  userGroups: [UserGroupItem!]!
}

input UserGroupInput {
  name: String!
  permissions: [PermissionName!]!
}

type UserGroupItem {
  createdAt: Date!
  name: String!
  uid: UID!
  updatedAt: Date!
}

input UserInput {
  login: String!
  password: String!
}

type UserItem {
  createdAt: Date!
  isTransportPassword: Boolean!
  login: String!
  profile: ProfileItem
  profileUid: UID!
  uid: UID!
  updatedAt: Date!
}

type UserToken {
  tokens: TokensDto!
  user: UserItem!
}

type UserWithPassword {
  password: String!
  user: UserItem!
}